#
#	FOR EACH Connector connector
#		IF connector->name IS IN 'reconnectionStrategy.turnOff.connectors.name' THEN
#			turnOff(connector)
#		ELSE IF connector->name IS IN 'reconnectionStrategy.turnOff.connectors.class' THEN
#			turnOff(connector)
#		
#		IF connector->name IS IN 'reconnectionStrategy.turnOffAndUnregister.connectors.name' THEN
#			unregisterFromMuleContext(connector)
#		ELSE IF connector->name IS IN 'reconnectionStrategy.turnOffAndUnregister.connectors.class' THEN
#			unregisterFromMuleContext(connector)
#	
#	
#		IF NOT(turnOff(connector)) AND NOT(unregisterFromMuleContext(connector))
#			blockingPolicy := loadPolicyFromClassName('reconnectionStrategy.blockingRetryPolicy.classCanonicalName')
#			IF connector->name IS IN 'blockingRetryPolicy.connectors.name' THEN
#				applyBlockingPolicy(connector, blockingPolicy)
#			ELSE IF connector->name IS IN 'blockingRetryPolicy.connectors.class' THEN
#				applyBlockingPolicy(connector, blockingPolicy)
#
#	WHILE true
#		IF isConnected(connector))
#			stoppablePolicy := loadPolicyFromClassName('reconnectionStrategy.stoppableRetryPolicy.classCanonicalName')
#			loadParametersOf(toppablePolicy)
#			IF connector->name IS IN 'stoppableRetryPolicy.connectors.name' THEN
#				applyStoppablePolicy(connector, stoppablePolicy)
#			ELSE IF connector->name IS IN 'stoppableRetryPolicy.connectors.class' THEN
#				applyStoppablePolicy(connector, stoppablePolicy)
#		ELSE
#			blockingPolicy := loadPolicyFromClassName('reconnectionStrategy.blockingRetryPolicy.classCanonicalName')
#			IF policyIsStopped(connector)
#				applyBlockingPolicy(connector, blockingPolicy)
#
#
################ List of properties to override ####################
#Insieme dei connettori, specificati mediante i rispettivi nomi, che saranno spenti
#reconnectionStrategy.turnOff.connectors.name=

#Insieme dei connettori, specificati mediante il nome della classe di appartenenza, che saranno spenti
#reconnectionStrategy.turnOff.connectors.class=

#Insieme dei connettori, specificati mediante i rispettivi nomi, che, una volta spenti, saranno eliminati dal contesto applicativo
#reconnectionStrategy.turnOffAndUnregister.connectors.name=Active_MQ1

#Insieme dei connettori, specificati mediante il nome della classe di appartenenza, che, una volta spenti, saranno eliminati dal contesto applicativo
#reconnectionStrategy.turnOffAndUnregister.connectors.class=

#Nome completo della classe da utilizzare come policy bloccante e consentire il deploy dell'applicazione anche in caso di tentativi di connessione falliti
#reconnectionStrategy.blockingRetryPolicy.classCanonicalName=com.ntt.iol.mule.reconnection.BlockingRetryStrategy

#Insieme dei connettori, specificati mediante i rispettivi nomi, ai quali agganciare una policy bloccante
#blockingRetryPolicy.connectors.name=Active_MQ2,Active_MQ3

#Insieme dei connettori, specificati mediante il nome della classe di appartenenza, ai quali agganciare una policy bloccante
#blockingRetryPolicy.connectors.class= org.mule.transport.jms.activemq.ActiveMQJmsConnector

#Nome completo della classe da utilizzare come policy stoppable da attivare in caso di ripristino delle connessioni
#reconnectionStrategy.stoppableRetryPolicy.classCanonicalName=com.ntt.iol.mule.reconnection.ExponentialRetryStrategy

#Insieme dei connettori, specificati mediante i rispettivi nomi, ai quali agganciare una policy stoppable
#stoppableRetryPolicy.connectors.name=Active_MQ2,Active_MQ3,Active_MQ1

#Insieme dei connettori, specificati mediante il nome della classe di appartenenza, ai quali agganciare una policy stoppable
#stoppableRetryPolicy.connectors.class= org.mule.transport.jms.activemq.ActiveMQJmsConnector

#Parametri della specifica policy stoppable. Diversi a seconda della policy
#exponentialRetryStrategy.maxRetryCount=0
#exponentialRetryStrategy.initialReconnectTimeMillis=150

